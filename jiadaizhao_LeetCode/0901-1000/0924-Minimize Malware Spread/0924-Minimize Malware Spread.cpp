#include <bits/stdc++.h>
#include <vector>
#include <iostream>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parent(n), area(n, 1);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j]) {
                    int p1 = findParent(parent, i);
                    int p2 = findParent(parent, j);
                    if (p1 != p2) {
                        parent[p1] = p2;
                        area[p2] += area[p1];
                    }                   
                }
            }
        }
        
        vector<int> malware(n);
        int minIndex = n;
        for (int i : initial) {
            minIndex = min(minIndex, i);
            ++malware[findParent(parent, i)];
        }
        
        int maxArea = 0;
        for (int i : initial) {
            int p = findParent(parent, i);
            if (malware[p] == 1) {
                if (area[p] > maxArea) {
                    maxArea = area[p];
                    minIndex = i;
                }
                else if (area[p] == maxArea) {
                    minIndex = min(minIndex, i);
                }
            }
        }
        return minIndex;
    }
    
private:
    int findParent(vector<int>& parent, int i) {
        while (parent[i] != i) {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
};

#include <bits/stdc++.h>
#include <vector>
#include <iostream>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parent(n), area(n, 1), clean;
        unordered_set<int> initial_set(initial.begin(), initial.end());
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
            if (!initial_set.count(i)) {
                clean.push_back(i);
            }
        }
        
        for (int i = 0; i < clean.size(); ++i) {
            for (int j = i + 1; j < clean.size(); ++j) {
                if (graph[clean[i]][clean[j]]) {
                    int p1 = findParent(parent, clean[i]);
                    int p2 = findParent(parent, clean[j]);
                    if (p1 != p2) {
                        parent[p1] = p2;
                        area[p2] += area[p1];
                    }                   
                }
            }
        }
        
        unordered_map<int, int> table;
        unordered_map<int, unordered_set<int>> node_to_component;
        for (int i : initial) {
            unordered_set<int> component;
            for (int j : clean) {
                if (graph[i][j]) {
                    component.insert(findParent(parent, j));
                }          
            }
            node_to_component[i] = component;
            for (int c : component) {
                ++table[c];
            }
        }
        
        int maxScore = -1, minIndex = -1;
        for (auto p : node_to_component) {
            int score = 0;
            for (int c : p.second) {
                if (table[c] == 1) {
                    score += area[findParent(parent, c)];
                }
            }
            if (score > maxScore) {
                maxScore = score;
                minIndex = p.first; 
            }
            else if (score == maxScore && p.first < minIndex) {
                minIndex = p.first;
            }
        }
        return minIndex;
    }
    
private:
    int findParent(vector<int>& parent, int i) {
        while (parent[i] != i) {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
};

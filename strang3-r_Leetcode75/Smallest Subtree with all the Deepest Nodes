
#include <bits/stdc++.h>
using namespace std;

// Structure of a Node
struct TreeNode {

	int val;
	TreeNode* left;
	TreeNode* right;

	TreeNode(int data)
	{
		this->val = data;
		left = NULL;
		right = NULL;
	}
};

int find_ht(TreeNode* root)
{
	if (!root)
		return 0;

	// If current node is a leaf node
	if (root->left == NULL
		&& root->right == NULL)
		return 1;

	return max(find_ht(root->left),
			find_ht(root->right))
		+ 1;
}

void find_node(TreeNode* root, TreeNode*& req_node)
{
	if (!root)
		return;

	// Stores height of left subtree
	int left_ht = find_ht(root->left);

	// Stores height of right subtree
	int right_ht = find_ht(root->right);

	// If height of left subtree exceeds
	// that of the right subtree
	if (left_ht > right_ht) {

		// Traverse left subtree
		find_node(root->left, req_node);
	}

	// If height of right subtree exceeds
	// that of the left subtree
	else if (right_ht > left_ht) {
		find_node(root->right, req_node);
	}

	// Otherwise
	else {

		// Return current node
		req_node = root;
		return;
	}
}

// Driver Code
int main()
{
	struct TreeNode* root
		= new TreeNode(1);
	root->left = new TreeNode(2);
	root->right = new TreeNode(3);

	TreeNode* req_node = NULL;

	find_node(root, req_node);

	cout << req_node->val;

	return 0;
}

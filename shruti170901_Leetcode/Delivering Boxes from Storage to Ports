class Solution {
public:
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int mb, int mw) {
        int m = boxes.size();
        vector<int> dp(m+1);
        
        // window start, cost, weight
        int i = 0, cost = 1, w = 0;
        for (int j = 0; j < m; ++j) {
            // if new box port is different from last one, increase cost
            if (j == 0 || boxes[j][0] != boxes[j-1][0]) cost += 1;
            w += boxes[j][1];
            
            while (j - i + 1 > mb || w > mw || (i < j && dp[i+1] == dp[i])) {
                w -= boxes[i][1];
                
                // if the start box is the same as the one after it, do nothing as we did not increase cost before
                // otherwise decrease it
                if (boxes[i][0] != boxes[i+1][0]) cost -= 1;
                i++;
            }
            
            dp[j+1] = dp[i] + cost;
        }
        
        return dp[m];
    }
};

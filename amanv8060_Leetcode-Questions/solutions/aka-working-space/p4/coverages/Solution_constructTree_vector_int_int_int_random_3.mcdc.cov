<pre>...
...
...
...
<b style="color: grey;">8     </b>  TreeNode* left;
<b style="color: grey;">9     </b>  TreeNode* right;
<b style="color: grey;">10     </b>  TreeNode(int x) : val(x), left(NULL), right(NULL) {}
<b style="color: grey;">11    </b>};
<b style="color: grey;">12    </b>
<b style="color: grey;">13    </b>class Solution {
<b style="color: grey;">14    </b> public:
<b style="color: grey;">15    </b>  TreeNode* constructTree(vector&lt;int&gt;&amp; nums, int start, int end) {
<b style="color: grey;">16    </b>    if (<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>start &gt; end</b>) {
<b style="color: grey;">17    </b>      <b style="background-color:yellow;color:black";>return NULL;</b>
<b style="color: grey;">18    </b>    }
<b style="color: grey;">19    </b>    int mid = (start + end) / 2;
<b style="color: grey;">20    </b>    TreeNode* root = new TreeNode(nums[mid]);
<b style="color: grey;">21    </b>    root-&gt;left = constructTree(nums, start, mid - 1);
<b style="color: grey;">22    </b>    root-&gt;right = constructTree(nums, mid + 1, end);
<b style="color: grey;">23    </b>    return root;
<b style="color: grey;">24    </b>  }
...
...
...
...
</pre>
<pre>...
...
...
...
<b style="color: grey;">5     </b>#include &lt;set&gt;
<b style="color: grey;">6     </b>#include &lt;unordered_map&gt;
<b style="color: grey;">7     </b>#include &lt;algorithm&gt;
<b style="color: grey;">8     </b>#include &lt;bits/stdc++.h&gt;
<b style="color: grey;">9     </b>using namespace std;
<b style="color: grey;">10     </b>class Solution {
<b style="color: grey;">11    </b> public:
<b style="color: grey;">12    </b>  int minSessions(vector&lt;int&gt;&amp; tasks, int sessionTime) {
<b style="color: grey;">13    </b>    <b style="background-color:yellow;color:black";>const int N = tasks.size();</b>
<b style="color: grey;">14    </b>    <b style="background-color:yellow;color:black";>const int INF = 1e9;</b>
<b style="color: grey;">15    </b>    <b style="background-color:yellow;color:black";>vector&lt;pair&lt;int, int&gt;&gt; dp(1 &lt;&lt; N, {INF, INF});</b>
<b style="color: grey;">16    </b>    <b style="background-color:yellow;color:black";>dp[0] = {0, INF};</b>
<b style="color: grey;">17    </b>    for (<b style="background-color:yellow;color:black";>int mask = 1;</b> <b style="background-color:yellow;color:black";>mask &lt; (1 &lt;&lt; N)</b>; <b style="background-color:yellow;color:black";>++mask</b>) {
<b style="color: grey;">18    </b>      <b style="background-color:yellow;color:black";>pair&lt;int, int&gt; best = {INF, INF};</b>
<b style="color: grey;">19    </b>      for (<b style="background-color:yellow;color:black";>int i = 0;</b> <b style="background-color:yellow;color:black";>i &lt; N</b>; <b style="background-color:yellow;color:black";>++i</b>) {
<b style="color: grey;">20    </b>        if (<b style="background-color:yellow;color:black";>mask &amp; (1 &lt;&lt; i)</b>) {
<b style="color: grey;">21    </b>          <b style="background-color:yellow;color:black";>pair&lt;int, int&gt; cur = dp[mask ^ (1 &lt;&lt; i)];</b>
<b style="color: grey;">22    </b>          if (<b style="background-color:yellow;color:black";>cur.second + tasks[i] &gt; sessionTime</b>) {
<b style="color: grey;">23    </b>            cur = {cur.first + 1, tasks[i]};
<b style="color: grey;">24    </b>          } else
<b style="color: grey;">25    </b>            <b style="background-color:yellow;color:black";>cur.second += tasks[i];</b>
<b style="color: grey;">26    </b>          <b style="background-color:yellow;color:black";>best = min(best, cur);</b>
<b style="color: grey;">27    </b>        }
<b style="color: grey;">28    </b>      }
<b style="color: grey;">29    </b>      <b style="background-color:yellow;color:black";>dp[mask] = best;</b>
<b style="color: grey;">30    </b>    }
<b style="color: grey;">31    </b>    <b style="background-color:yellow;color:black";>return dp[(1 &lt;&lt; N) - 1].first;</b>
<b style="color: grey;">32    </b>  }
...
...
...
...
</pre>
#include <bits/stdc++.h>
#include <vector>
#include <iostream>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
    int bfs(vector<vector<int>>& graph, vector<int>& initial,int node){
        unordered_set<int> s;
        queue<int> q;
        s.insert(node);
        int count=0;
        for(auto i:initial ) if(i!=node) q.push(i);
        while(!q.empty()){
            int front=q.front();
            q.pop();
            if(s.count(front)) continue;
            s.insert(front);
            count++;
            for(int j=0;j<graph.size();j++){
                if(graph[front][j] && j!=front){
                    q.push(j);
                }
            }
        }
        return count;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        int ans=0;
        int anssize=n;
        sort(initial.begin(),initial.end());
        for(auto i:initial){
            int c=bfs(graph,initial,i);
            if(anssize>c){
                ans=i;
                anssize=c;
            }
        }
        return ans;
    }
};
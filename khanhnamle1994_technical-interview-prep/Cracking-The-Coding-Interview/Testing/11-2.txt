You are given the source to an application which crashes when it is run. After running it 10 times in a debugger, you find it never
crashes in the same place. The application is single threaded, and uses only the C standard library. What programming errors could be
causing this crash? How would you test each one?

The question largely depends on the type of application being diagnosed. However, we can give some general causes of random crashes.

1. Random variable: The application uses some random number or variable component which may not be fixed for every execution of the
program. Examples include: user input, a random number generated by the program, or the time of day.

2. Memory Leak: The program may have run out of memory. Other culprits are totally random for each run since it depends on the number
of processes running at that particular time. This also includes heap overflow or corruption of data on the stack.

It is also possible that the program depends on another application / external module that could lead to the crash. If our application,
for example, depends on some system attributes and they are modified by another program, then this interference may lead to a crash.
Programs which interact with hardware are more prone to these errors.

In an interview, we should ask about which kind of application is being run. This information may give you some idea about the kind of
error the interviewer is looking for. For example, a web server is more prone to memory leakage, whereas a program that runs close to
 the system level is more prone to crashes due to system dependencies.

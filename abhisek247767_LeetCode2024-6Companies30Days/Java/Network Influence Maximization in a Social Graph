import java.util.*;

class InfluenceMaximization {
    static class Graph {
        private Map<Integer, Integer> influenceScores;
        private Map<Integer, List<Integer>> adjList;

        public Graph() {
            influenceScores = new HashMap<>();
            adjList = new HashMap<>();
        }

        public void addNode(int node, int influence) {
            influenceScores.put(node, influence);
            adjList.putIfAbsent(node, new ArrayList<>());
        }

        public void addEdge(int from, int to) {
            adjList.get(from).add(to);
        }

        public int calculateInfluence(int node) {
            Set<Integer> visited = new HashSet<>();
            Queue<Integer> queue = new LinkedList<>();
            queue.add(node);
            int totalInfluence = influenceScores.get(node);

            while (!queue.isEmpty()) {
                int current = queue.poll();

                if (!visited.contains(current)) {
                    visited.add(current);
                    for (int neighbor : adjList.get(current)) {
                        if (!visited.contains(neighbor)) {
                            totalInfluence += influenceScores.get(neighbor);
                            queue.add(neighbor);
                        }
                    }
                }
            }
            return totalInfluence;
        }

        public List<Integer> maxInfluence(int K) {
            List<Integer> selectedNodes = new ArrayList<>();
            
            for (int i = 0; i < K; i++) {
                int bestNode = -1;
                int bestInfluence = 0;

                for (int node : influenceScores.keySet()) {
                    if (!selectedNodes.contains(node)) {
                        int influence = calculateInfluence(node);
                        if (influence > bestInfluence) {
                            bestInfluence = influence;
                            bestNode = node;
                        }
                    }
                }

                if (bestNode != -1) {
                    selectedNodes.add(bestNode);
                }
            }
            return selectedNodes;
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addNode(1, 10);
        graph.addNode(2, 20);
        graph.addNode(3, 15);
        graph.addNode(4, 30);
        graph.addNode(5, 25);

        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(3, 4);
        graph.addEdge(4, 5);
        graph.addEdge(2, 5);

        int K = 2;
        List<Integer> result = graph.maxInfluence(K);
        System.out.println("The selected nodes with maximum influence are: " + result);
    }
}

assume the array is a[0..n-1] and the elements have range 0..n-2. imagine we construct a graph, for each i, add edge i->a[i]. each node has out degree 1, so the whole graph is a set of cycles, where one cycle has a chain pointing to it. To find the duplicate element, we only need to find the place where the chain attach to the cycle. We know n-1 must be in the chain, because no node points to it. use floyd cycle detection by two pointers. O(n) time, O(1) space.

remark. if the elements are arbitrary integers which can be stored in a single word, the problem is still solvable in expected O(n) time and O(1) additional space, by data compression and hashing. see my answer here https://www.zhihu.com/question/50898253/answer/1100888832.


<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>
<b style="color: grey;">35    </b>    void dfs(TreeNode* node, TreeNode* par, int &amp;camCount, set&lt;TreeNode*&gt; &amp;covered) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>node == NULL</b>)                        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">38    </b>        
<b style="color: grey;">39    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>node != NULL</b>) {
<b style="color: grey;">40    </b>            
<b style="color: grey;">41    </b>            <b style="background-color:yellow;color:black";>dfs(node-&gt;left, node, camCount, covered);</b>
<b style="color: grey;">42    </b>            <b style="background-color:yellow;color:black";>dfs(node-&gt;right, node, camCount, covered);</b>
<b style="color: grey;">43    </b>            
<b style="color: grey;">44    </b>            // Here, you go to bottom level of the tree
<b style="color: grey;">45    </b>            
<b style="color: grey;">46    </b>            // Check if I need to add camera at node
<b style="color: grey;">47    </b>            
<b style="color: grey;">48    </b>            // if (par is NULL &amp;&amp; node is uncovered) || any of left or right node is uncovered
<b style="color: grey;">49    </b>            if( <b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>(par == NULL &amp;&amp; covered.find(node) == covered.end()) || 
<b style="color: grey;">50    </b>                covered.find(node-&gt;left) == covered.end() || 
<b style="color: grey;">51    </b>                covered.find(node-&gt;right) == covered.end()</b> ) {
<b style="color: grey;">52    </b>                
<b style="color: grey;">53    </b>                <b style="background-color:yellow;color:black";>camCount++;</b>
<b style="color: grey;">54    </b>                
<b style="color: grey;">55    </b>                // Cover node, par, and its left and right child
<b style="color: grey;">56    </b>                <b style="background-color:yellow;color:black";>covered.insert(node);</b>
<b style="color: grey;">57    </b>                <b style="background-color:yellow;color:black";>covered.insert(par);</b>
<b style="color: grey;">58    </b>                <b style="background-color:yellow;color:black";>covered.insert(node-&gt;left);</b>
<b style="color: grey;">59    </b>                <b style="background-color:yellow;color:black";>covered.insert(node-&gt;right);</b>
<b style="color: grey;">60    </b>            }
<b style="color: grey;">61    </b>        }
<b style="color: grey;">62    </b>        
<b style="color: grey;">63    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">64    </b>    }
<b style="color: grey;">65    </b>    
<b style="color: grey;">66    </b>    int minCameraCover(TreeNode* root) {
<b style="color: grey;">67    </b>        
<b style="color: grey;">68    </b>        int camCount = 0;
<b style="color: grey;">69    </b>        set&lt;TreeNode*&gt; covered;
<b style="color: grey;">70    </b>        
...
...
...
...
</pre>
<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>    
<b style="color: grey;">35    </b>    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
<b style="color: grey;">36    </b>    
<b style="color: grey;">37    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root1 == NULL &amp;&amp; root2 == NULL</b>)                  return true;
<b style="color: grey;">38    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root1 == NULL || root2 == NULL</b>)                  return false;
<b style="color: grey;">39    </b>        
<b style="color: grey;">40    </b>        <b style="background-color:yellow;color:black";>bool f1 = flipEquiv(root1-&gt;left, root2-&gt;left) &amp;&amp; flipEquiv(root1-&gt;right, root2-&gt;right);</b>
<b style="color: grey;">41    </b>        bool f2 = flipEquiv(root1-&gt;left, root2-&gt;right) &amp;&amp; flipEquiv(root1-&gt;right, root2-&gt;left);
<b style="color: grey;">42    </b>        
<b style="color: grey;">43    </b>        return (root1-&gt;val == root2-&gt;val) &amp;&amp; (f1 || f2);
<b style="color: grey;">44    </b>    }
<b style="color: grey;">45    </b>    
...
...
...
...
</pre>
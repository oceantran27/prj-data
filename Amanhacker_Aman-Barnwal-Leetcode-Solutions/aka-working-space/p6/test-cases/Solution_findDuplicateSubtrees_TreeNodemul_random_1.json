{
  "name": "Solution_findDuplicateSubtrees_TreeNodemul_random_1",
  "status": "success",
  "testCaseUserCode": {
    "includePaths": [],
    "setUpContent": "// set up\n;",
    "tearDownContent": "// tear down\n;"
  },
  "path": ".\\\\aka-working-space\\\\p6\\\\test-cases\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.json",
  "sourceCode": ".\\\\aka-working-space\\\\p6\\\\test-drivers\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.cpp",
  "testPath": ".\\\\aka-working-space\\\\p6\\\\test-paths\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.tp",
  "executable": ".\\\\aka-working-space\\\\p6\\\\exe\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.exe",
  "commandConfig": ".\\aka-working-space\\p6\\test-case-commands\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.json",
  "commandDebug": ".\\\\aka-working-space\\\\p6\\\\debugger\\\\commands\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.json",
  "breakPoint": ".\\\\aka-working-space\\\\p6\\\\debugger\\\\breakpoints\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.br.json",
  "debugExecutable": ".\\\\aka-working-space\\\\p6\\\\exe\\debug_Solution_findDuplicateSubtrees_TreeNodemul_random_1.exe",
  "executionResult": ".\\\\aka-working-space\\\\p6\\\\execution-results\\Solution_findDuplicateSubtrees_TreeNodemul_random_1.xml",
  "creationDate": "2025-02-14T07:31:17.827972200",
  "executionDate": "2025-02-14T07:31:30.378549800",
  "rootDataNode": {
    "type": "com.dse.testdata.object.RootDataNode",
    "name": "ROOT",
    "virtual_name": "NON_VALUE",
    "functionNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)",
    "level": "ROOT",
    "children": [
      {
        "type": "com.dse.testdata.object.UnitUnderTestNode",
        "name": "0652-find-duplicate-subtrees.cpp",
        "virtual_name": "NON_VALUE",
        "sourceNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp",
        "children": [
          {
            "type": "com.dse.testdata.object.GlobalRootDataNode",
            "name": "GLOBAL",
            "virtual_name": "NON_VALUE",
            "functionNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)",
            "paramExpectedOuputs": [
              {
                "type": "com.dse.testdata.object.ClassDataNode",
                "name": "AKA_INSTANCE___Solution",
                "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                "dataType": "::Solution",
                "realType": "::Solution",
                "external": false,
                "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\AKA_INSTANCE___Solution",
                "correspondingType": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution"
              }
            ],
            "level": "GLOBAL",
            "children": [
              {
                "type": "com.dse.testdata.object.ClassDataNode",
                "name": "AKA_INSTANCE___Solution",
                "virtual_name": "AKA_INSTANCE___Solution",
                "dataType": "::Solution",
                "realType": "::Solution",
                "external": true,
                "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\AKA_INSTANCE___Solution",
                "correspondingType": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution",
                "children": [
                  {
                    "type": "com.dse.testdata.object.SubClassDataNode",
                    "name": "AKA_INSTANCE___Solution",
                    "virtual_name": "AKA_INSTANCE___Solution",
                    "dataType": "::Solution",
                    "realType": "::Solution",
                    "external": false,
                    "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\AKA_INSTANCE___Solution",
                    "correspondingType": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution",
                    "rawType": "::Solution",
                    "selectedConstructor": "Solution()",
                    "variableType": "::Solution",
                    "children": [
                      {
                        "type": "com.dse.testdata.object.ConstructorDataNode",
                        "name": "Solution()",
                        "virtual_name": "AKA_INSTANCE___Solution",
                        "dataType": "::Solution",
                        "realType": "::Solution",
                        "functionNode": "\\Solution()"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "type": "com.dse.testdata.object.SubprogramNode",
            "name": "findDuplicateSubtrees(TreeNode*)",
            "virtual_name": "NON_VALUE",
            "dataType": "vector\u003cTreeNode*\u003e",
            "realType": "vector\u003cTreeNode*\u003e",
            "functionNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)",
            "paramExpectedOuputs": [
              {
                "type": "com.dse.testdata.object.PointerStructureDataNode",
                "name": "root",
                "virtual_name": "EXPECTED_root",
                "dataType": "TreeNode*",
                "realType": "TreeNode*",
                "external": false,
                "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)\\root",
                "correspondingType": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\TreeNode",
                "level": 1
              }
            ],
            "children": [
              {
                "type": "com.dse.testdata.object.RootDataNode",
                "name": "STATIC",
                "virtual_name": "NON_VALUE",
                "functionNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)",
                "level": "STATIC"
              },
              {
                "type": "com.dse.testdata.object.PointerStructureDataNode",
                "name": "root",
                "virtual_name": "root",
                "dataType": "TreeNode*",
                "realType": "TreeNode*",
                "external": false,
                "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)\\root",
                "correspondingType": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\TreeNode",
                "level": 1
              },
              {
                "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                "name": "RETURN",
                "virtual_name": "AKA_EXPECTED_OUTPUT",
                "dataType": "vector\u003cTreeNode*\u003e",
                "realType": "vector\u003cTreeNode*\u003e",
                "external": false,
                "correspondingVar": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)\\RETURN",
                "correspondingType": "STLListBaseType",
                "templateArg": "TreeNode*"
              }
            ]
          }
        ]
      },
      {
        "type": "com.dse.testdata.object.RootDataNode",
        "name": "STUB",
        "virtual_name": "NON_VALUE",
        "functionNode": ".\\p6\\0652-find-duplicate-subtrees\\0652-find-duplicate-subtrees.cpp\\Solution\\findDuplicateSubtrees(TreeNode*)",
        "level": "STUB"
      }
    ]
  },
  "procedures": [
    {
      "className": "com.dse.testdata.functionscalls_and_conditions.ProcedureDataNode",
      "type": "condition",
      "value": "root \u003d\u003d NULL",
      "isSelected": false,
      "location": 118,
      "calls": [],
      "children": []
    },
    {
      "className": "com.dse.testdata.functionscalls_and_conditions.ProcedureDataNode",
      "type": "function_call",
      "value": "solve();",
      "isSelected": false,
      "location": 235,
      "calls": [],
      "children": []
    }
  ]
}
<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>    
<b style="color: grey;">35    </b>    void findSubtreeSum(TreeNode* root, int &amp;sum) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                            <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">38    </b>        
<b style="color: grey;">39    </b>        <b style="background-color:yellow;color:black";>sum += root-&gt;val;</b>
<b style="color: grey;">40    </b>        
<b style="color: grey;">41    </b>        <b style="background-color:yellow;color:black";>findSubtreeSum(root-&gt;left, sum);</b>
<b style="color: grey;">42    </b>        <b style="background-color:yellow;color:black";>findSubtreeSum(root-&gt;right, sum);</b>
<b style="color: grey;">43    </b>        
<b style="color: grey;">44    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">45    </b>    }
<b style="color: grey;">46    </b>    
<b style="color: grey;">47    </b>    void dfs(TreeNode* root, unordered_map&lt;int, int&gt; &amp;u) {
<b style="color: grey;">48    </b>        
<b style="color: grey;">49    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                            <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">50    </b>        
<b style="color: grey;">51    </b>        <b style="background-color:yellow;color:black";>int sum = 0;</b>
<b style="color: grey;">52    </b>        <b style="background-color:yellow;color:black";>findSubtreeSum(root, sum);</b>
<b style="color: grey;">53    </b>        
<b style="color: grey;">54    </b>        <b style="background-color:yellow;color:black";>u[sum]++;</b>
<b style="color: grey;">55    </b>        
<b style="color: grey;">56    </b>        <b style="background-color:yellow;color:black";>dfs(root-&gt;left, u);</b>
<b style="color: grey;">57    </b>        <b style="background-color:yellow;color:black";>dfs(root-&gt;right, u);</b>
<b style="color: grey;">58    </b>        
<b style="color: grey;">59    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">60    </b>    }
<b style="color: grey;">61    </b>    
<b style="color: grey;">62    </b>    vector&lt;int&gt; findFrequentTreeSum(TreeNode* root) {
<b style="color: grey;">63    </b>    
<b style="color: grey;">64    </b>        <b style="background-color:yellow;color:black";>vector&lt;int&gt; res;</b>
<b style="color: grey;">65    </b>        
<b style="color: grey;">66    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                            return res;
<b style="color: grey;">67    </b>        
<b style="color: grey;">68    </b>        // 1st arg - sum, 2nd arg - Freq
<b style="color: grey;">69    </b>        <b style="background-color:yellow;color:black";>unordered_map&lt;int, int&gt; u;</b>      
<b style="color: grey;">70    </b>        
<b style="color: grey;">71    </b>        // Find subtree sum at each node
<b style="color: grey;">72    </b>        <b style="background-color:yellow;color:black";>dfs(root, u);</b>
<b style="color: grey;">73    </b>        
<b style="color: grey;">74    </b>        <b style="background-color:yellow;color:black";>int maxFreq = -1;</b>
<b style="color: grey;">75    </b>        
<b style="color: grey;">76    </b>        // 1st arg - Freq, 2nd arg - vector of Sum
<b style="color: grey;">77    </b>        <b style="background-color:yellow;color:black";>unordered_map&lt;int, vector&lt;int&gt;&gt; mp;</b>
<b style="color: grey;">78    </b>        
<b style="color: grey;">79    </b>        for(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>auto &amp;x</b> : u) {
<b style="color: grey;">80    </b>            
<b style="color: grey;">81    </b>            if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>maxFreq &lt;= x.second</b>) {
<b style="color: grey;">82    </b>                <b style="background-color:yellow;color:black";>maxFreq = x.second;</b>
<b style="color: grey;">83    </b>                <b style="background-color:yellow;color:black";>mp[maxFreq].push_back(x.first);</b>        
<b style="color: grey;">84    </b>            }
<b style="color: grey;">85    </b>        }
<b style="color: grey;">86    </b>        
<b style="color: grey;">87    </b>        <b style="background-color:yellow;color:black";>res = mp[maxFreq];</b>
<b style="color: grey;">88    </b>        <b style="background-color:yellow;color:black";>return res;</b>
<b style="color: grey;">89    </b>    }
<b style="color: grey;">90    </b>    
...
...
...
...
</pre>
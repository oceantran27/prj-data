<pre>...
...
...
...
<b style="color: grey;">25     </b>     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
<b style="color: grey;">26     </b> };
<b style="color: grey;">27     </b>
<b style="color: grey;">28     </b>class Codec {
<b style="color: grey;">29     </b>public:
<b style="color: grey;">30     </b>
<b style="color: grey;">31     </b>    void bfs(TreeNode* root, string &amp;res) {
<b style="color: grey;">32     </b>        
<b style="color: grey;">33     </b>        if(<b style="background-color:yellow;color:black";>root == NULL</b>)                        return;
<b style="color: grey;">34     </b>        
<b style="color: grey;">35     </b>        <b style="background-color:yellow;color:black";>queue&lt;TreeNode*&gt; q;</b>
<b style="color: grey;">36     </b>        <b style="background-color:yellow;color:black";>q.push(root);</b>
<b style="color: grey;">37     </b>        
<b style="color: grey;">38     </b>        while(<b style="background-color:yellow;color:black";>q.empty() == false</b>) {
<b style="color: grey;">39     </b>            
<b style="color: grey;">40     </b>            <b style="background-color:yellow;color:black";>int n = q.size();</b>
<b style="color: grey;">41     </b>            
<b style="color: grey;">42     </b>            while(<b style="background-color:yellow;color:black";>n--</b>) {
<b style="color: grey;">43     </b>                
<b style="color: grey;">44     </b>                <b style="background-color:yellow;color:black";>TreeNode* temp = q.front();</b>
<b style="color: grey;">45     </b>                <b style="background-color:yellow;color:black";>q.pop();</b>
<b style="color: grey;">46     </b>                
<b style="color: grey;">47     </b>                if(<b style="background-color:yellow;color:black";>temp == NULL</b>)                <b style="background-color:yellow;color:black";>res += &quot;#,&quot;;</b>
<b style="color: grey;">48     </b>                else                            <b style="background-color:yellow;color:black";>res += to_string(temp-&gt;val) + &#39;,&#39;;</b>   
<b style="color: grey;">49     </b>                
<b style="color: grey;">50     </b>                if(<b style="background-color:yellow;color:black";>temp != NULL</b>) {
<b style="color: grey;">51     </b>                    <b style="background-color:yellow;color:black";>q.push(temp-&gt;left);</b>
<b style="color: grey;">52     </b>                    <b style="background-color:yellow;color:black";>q.push(temp-&gt;right);</b>
<b style="color: grey;">53     </b>                }   
<b style="color: grey;">54     </b>            }
<b style="color: grey;">55     </b>        }
<b style="color: grey;">56     </b>        
<b style="color: grey;">57     </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">58     </b>    }
<b style="color: grey;">59     </b>    
<b style="color: grey;">60     </b>    // Encodes a tree to a single string.
<b style="color: grey;">61     </b>    string serialize(TreeNode* root) {
<b style="color: grey;">62     </b>        
<b style="color: grey;">63     </b>        string res = &quot;&quot;;
<b style="color: grey;">64     </b>        
...
...
...
...
</pre>
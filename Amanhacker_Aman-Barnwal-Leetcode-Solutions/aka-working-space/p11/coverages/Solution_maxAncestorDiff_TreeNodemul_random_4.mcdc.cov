<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>
<b style="color: grey;">35    </b>    void findMinMax(TreeNode* root, TreeNode* node, int &amp;mini, int &amp;maxi) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>node == NULL</b>)                            return;
<b style="color: grey;">38    </b>        
<b style="color: grey;">39    </b>        // For any node in the subtree of root node
<b style="color: grey;">40    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>node != root</b>) {
<b style="color: grey;">41    </b>            <b style="background-color:yellow;color:black";>mini = min(mini, node-&gt;val);</b>
<b style="color: grey;">42    </b>            maxi = max(maxi, node-&gt;val);
<b style="color: grey;">43    </b>        }
<b style="color: grey;">44    </b>        
<b style="color: grey;">45    </b>        <b style="background-color:yellow;color:black";>findMinMax(root, node-&gt;left, mini, maxi);</b>
<b style="color: grey;">46    </b>        findMinMax(root, node-&gt;right, mini, maxi);
<b style="color: grey;">47    </b>        
<b style="color: grey;">48    </b>        return;
<b style="color: grey;">49    </b>    }
<b style="color: grey;">50    </b>    
<b style="color: grey;">51    </b>    bool isLeafNode(TreeNode* root) {
<b style="color: grey;">52    </b>        <b style="background-color:yellow;color:black";>return (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL);</b>
<b style="color: grey;">53    </b>    }
<b style="color: grey;">54    </b>    
<b style="color: grey;">55    </b>    // For each node, find the min and max value of its descendants of its subtree
<b style="color: grey;">56    </b>    
<b style="color: grey;">57    </b>    void dfs(TreeNode* root, int &amp;res) {
<b style="color: grey;">58    </b>        
<b style="color: grey;">59    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                            return;
<b style="color: grey;">60    </b>        
<b style="color: grey;">61    </b>        <b style="background-color:yellow;color:black";>int mini = INT_MAX, maxi = INT_MIN;</b>
<b style="color: grey;">62    </b>        
<b style="color: grey;">63    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>isLeafNode(root) == false</b>) {
<b style="color: grey;">64    </b>           
<b style="color: grey;">65    </b>            <b style="background-color:yellow;color:black";>findMinMax(root, root, mini, maxi);</b>
<b style="color: grey;">66    </b>            
<b style="color: grey;">67    </b>            int diff = max( abs(root-&gt;val - maxi), abs(root-&gt;val - mini) );
<b style="color: grey;">68    </b>            res = max(res, diff);
<b style="color: grey;">69    </b>        }
<b style="color: grey;">70    </b>        
<b style="color: grey;">71    </b>        dfs(root-&gt;left, res);
<b style="color: grey;">72    </b>        dfs(root-&gt;right, res);
<b style="color: grey;">73    </b>        
<b style="color: grey;">74    </b>        return;
<b style="color: grey;">75    </b>    }
<b style="color: grey;">76    </b>    
<b style="color: grey;">77    </b>    int maxAncestorDiff(TreeNode* root) {
<b style="color: grey;">78    </b>    
<b style="color: grey;">79    </b>        <b style="background-color:yellow;color:black";>int res = INT_MIN;</b>
<b style="color: grey;">80    </b>        
<b style="color: grey;">81    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                            return res;
<b style="color: grey;">82    </b>        
<b style="color: grey;">83    </b>        <b style="background-color:yellow;color:black";>dfs(root, res);</b>
<b style="color: grey;">84    </b>        
<b style="color: grey;">85    </b>        return res;
<b style="color: grey;">86    </b>    }
...
...
...
...
</pre>
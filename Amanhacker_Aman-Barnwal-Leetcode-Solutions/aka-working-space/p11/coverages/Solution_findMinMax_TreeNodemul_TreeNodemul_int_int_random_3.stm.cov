<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>
<b style="color: grey;">35    </b>    void findMinMax(TreeNode* root, TreeNode* node, int &amp;mini, int &amp;maxi) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        if(<b style="background-color:yellow;color:black";>node == NULL</b>)                            return;
<b style="color: grey;">38    </b>        
<b style="color: grey;">39    </b>        // For any node in the subtree of root node
<b style="color: grey;">40    </b>        if(<b style="background-color:yellow;color:black";>node != root</b>) {
<b style="color: grey;">41    </b>            <b style="background-color:yellow;color:black";>mini = min(mini, node-&gt;val);</b>
<b style="color: grey;">42    </b>            <b style="background-color:yellow;color:black";>maxi = max(maxi, node-&gt;val);</b>
<b style="color: grey;">43    </b>        }
<b style="color: grey;">44    </b>        
<b style="color: grey;">45    </b>        <b style="background-color:yellow;color:black";>findMinMax(root, node-&gt;left, mini, maxi);</b>
<b style="color: grey;">46    </b>        findMinMax(root, node-&gt;right, mini, maxi);
<b style="color: grey;">47    </b>        
<b style="color: grey;">48    </b>        return;
<b style="color: grey;">49    </b>    }
<b style="color: grey;">50    </b>    
<b style="color: grey;">51    </b>    bool isLeafNode(TreeNode* root) {
<b style="color: grey;">52    </b>        return (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL);
...
...
...
...
</pre>
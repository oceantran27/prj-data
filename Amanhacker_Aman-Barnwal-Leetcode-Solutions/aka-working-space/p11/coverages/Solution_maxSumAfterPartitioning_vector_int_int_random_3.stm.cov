<pre>...
...
...
...
<b style="color: grey;">9     </b>using namespace std;
<b style="color: grey;">10     </b>
<b style="color: grey;">11    </b>class Solution {
<b style="color: grey;">12    </b>public:
<b style="color: grey;">13    </b>  
<b style="color: grey;">14    </b>    int helperMaxSum(vector&lt;int&gt; &amp;a, int n, int k, int pos, int &amp;res, vector&lt;int&gt; &amp;dp) {
<b style="color: grey;">15    </b>        
<b style="color: grey;">16    </b>        // Base Condition
<b style="color: grey;">17    </b>        if(<b style="background-color:yellow;color:black";>pos &gt;= n</b>)                                    <b style="background-color:yellow;color:black";>return 0;</b>
<b style="color: grey;">18    </b>        if(<b style="background-color:yellow;color:black";>pos &lt; n &amp;&amp; dp[pos] != -1</b>)                    <b style="background-color:yellow;color:black";>return dp[pos];</b>
<b style="color: grey;">19    </b>        
<b style="color: grey;">20    </b>        <b style="background-color:yellow;color:black";>int maxEle = 0;</b>
<b style="color: grey;">21    </b>        
<b style="color: grey;">22    </b>        // For each position pos, increase your subarray size i from 0 to k - 1, tracking the max value maxEle so far. 
<b style="color: grey;">23    </b>        // The sum of the subarray is maxEle * (i + 1).
<b style="color: grey;">24    </b>
<b style="color: grey;">25    </b>        for(<b style="background-color:yellow;color:black";>int i = 0;</b> <b style="background-color:yellow;color:black";>i &lt; k &amp;&amp; pos + i &lt; n</b>; <b style="background-color:yellow;color:black";>i++</b>) {
<b style="color: grey;">26    </b>           
<b style="color: grey;">27    </b>            <b style="background-color:yellow;color:black";>maxEle = max(maxEle, a[pos + i]);</b>
<b style="color: grey;">28    </b>            
<b style="color: grey;">29    </b>            <b style="background-color:yellow;color:black";>int temp = ( maxEle * (i + 1) ) + helperMaxSum(a, n, k, pos + i + 1, res, dp);</b>
<b style="color: grey;">30    </b>            <b style="background-color:yellow;color:black";>res = max(res, temp);</b>
<b style="color: grey;">31    </b>        }
<b style="color: grey;">32    </b>        
<b style="color: grey;">33    </b>        // Use memoisation to track the maximum sum for the position (dp).
<b style="color: grey;">34    </b>        <b style="background-color:yellow;color:black";>dp[pos] = res;</b>
<b style="color: grey;">35    </b>        <b style="background-color:yellow;color:black";>return res;</b>
<b style="color: grey;">36    </b>    }
<b style="color: grey;">37    </b>    
<b style="color: grey;">38    </b>    int maxSumAfterPartitioning(vector&lt;int&gt;&amp; a, int k) {
<b style="color: grey;">39    </b>    
<b style="color: grey;">40    </b>        <b style="background-color:yellow;color:black";>int n = a.size();</b>
<b style="color: grey;">41    </b>        if(<b style="background-color:yellow;color:black";>n == 0</b>)                                      return 0;
<b style="color: grey;">42    </b>        
<b style="color: grey;">43    </b>        <b style="background-color:yellow;color:black";>int pos = 0, res = 0;</b>
<b style="color: grey;">44    </b>        <b style="background-color:yellow;color:black";>vector&lt;int&gt; dp(n + 1, -1);</b>
<b style="color: grey;">45    </b>        
<b style="color: grey;">46    </b>        <b style="background-color:yellow;color:black";>return helperMaxSum(a, n, k, pos, res, dp);</b>
<b style="color: grey;">47    </b>    }
<b style="color: grey;">48    </b>    
...
...
...
...
</pre>
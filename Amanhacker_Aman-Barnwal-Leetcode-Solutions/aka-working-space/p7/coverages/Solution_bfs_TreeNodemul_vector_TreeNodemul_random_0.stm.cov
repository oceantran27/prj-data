<pre>...
...
...
...
<b style="color: grey;">29    </b>     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>    
<b style="color: grey;">35    </b>    void bfs(TreeNode* root, vector&lt;TreeNode*&gt; &amp;deepest) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        if(<b style="background-color:yellow;color:black";>root == NULL</b>)                            return;
<b style="color: grey;">38    </b>        
<b style="color: grey;">39    </b>        <b style="background-color:yellow;color:black";>queue&lt;TreeNode*&gt; q;</b>
<b style="color: grey;">40    </b>        <b style="background-color:yellow;color:black";>q.push(root);</b>
<b style="color: grey;">41    </b>        
<b style="color: grey;">42    </b>        while(<b style="background-color:yellow;color:black";>q.empty() == false</b>) {
<b style="color: grey;">43    </b>            
<b style="color: grey;">44    </b>            <b style="background-color:yellow;color:black";>int n = q.size();</b>
<b style="color: grey;">45    </b>            <b style="background-color:yellow;color:black";>deepest.clear();</b>
<b style="color: grey;">46    </b>            
<b style="color: grey;">47    </b>            while(<b style="background-color:yellow;color:black";>n--</b>) {
<b style="color: grey;">48    </b>                
<b style="color: grey;">49    </b>                <b style="background-color:yellow;color:black";>TreeNode* temp = q.front();</b>
<b style="color: grey;">50    </b>                <b style="background-color:yellow;color:black";>q.pop();</b>
<b style="color: grey;">51    </b>                
<b style="color: grey;">52    </b>                <b style="background-color:yellow;color:black";>deepest.push_back(temp);</b>
<b style="color: grey;">53    </b>                
<b style="color: grey;">54    </b>                if(<b style="background-color:yellow;color:black";>temp-&gt;left != NULL</b>)              q.push(temp-&gt;left);
<b style="color: grey;">55    </b>                if(<b style="background-color:yellow;color:black";>temp-&gt;right != NULL</b>)             q.push(temp-&gt;right);
<b style="color: grey;">56    </b>            }
<b style="color: grey;">57    </b>        }
<b style="color: grey;">58    </b>        
<b style="color: grey;">59    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">60    </b>    }
<b style="color: grey;">61    </b>    
<b style="color: grey;">62    </b>    TreeNode* findLCA(TreeNode* root, TreeNode* l, TreeNode* r) {
<b style="color: grey;">63    </b>        
<b style="color: grey;">64    </b>        if(root == NULL)                                        return NULL;
<b style="color: grey;">65    </b>        
<b style="color: grey;">66    </b>        if(root-&gt;val == l-&gt;val || root-&gt;val == r-&gt;val)          return root;
...
...
...
...
</pre>
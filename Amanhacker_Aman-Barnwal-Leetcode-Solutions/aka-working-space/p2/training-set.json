[
  {   "path_fm" : "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p2\\0096-unique-binary-search-trees\\0096-unique-binary-search-trees.cpp\\Solution\\numTrees(int)",   "simplified_t" : [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n" ],   "m" : [ ],   "fc" : "class Solution {\r public:\r     \r     int numTrees(int n) {\r     \r         // We have to find the no of structurally unique BSTs which has exactly n nodes of unique values from [1, n]\r         \r         // For each i in [1, n], consider each i as root node\r         \r         // Let's say, the left child of root node i will give us total c1 unique BST, \r         // and right child gives c2 unique BST.\r         \r         // So, the total no of unique BSTs considering node i as root is c1 * c2\r         \r         // If n = 4 i.e [1, 2, 3, 4]\r         // No of unique BSTs = c0 * c3 + c1 * c2 + c2 * c1 + c3 * c0\r         \r         // I.e We just need to calculate catalan number\r         // Cn = for i in [0, n]         C(i) * C(n - i - 1)\r         \r         vector<int> cat(n + 1, 0);\r         \r         cat[0] = 1;\r         cat[1] = 1;\r         \r         if(n <= 1)                      return cat[n];\r         \r         for(int i=2; i<=n; i++) {\r             \r             cat[i] = 0;             \r             \r             for(int j=0; j<i; j++)      cat[i] += cat[j] * cat[i - j - 1];\r         }\r         \r         return cat[n];\r     }\r     \r };",   "fm" : "int numTrees(int n) {\r     \r         // We have to find the no of structurally unique BSTs which has exactly n nodes of unique values from [1, n]\r         \r         // For each i in [1, n], consider each i as root node\r         \r         // Let's say, the left child of root node i will give us total c1 unique BST, \r         // and right child gives c2 unique BST.\r         \r         // So, the total no of unique BSTs considering node i as root is c1 * c2\r         \r         // If n = 4 i.e [1, 2, 3, 4]\r         // No of unique BSTs = c0 * c3 + c1 * c2 + c2 * c1 + c3 * c0\r         \r         // I.e We just need to calculate catalan number\r         // Cn = for i in [0, n]         C(i) * C(n - i - 1)\r         \r         vector<int> cat(n + 1, 0);\r         \r         cat[0] = 1;\r         cat[1] = 1;\r         \r         if(n <= 1)                      return cat[n];\r         \r         for(int i=2; i<=n; i++) {\r             \r             cat[i] = 0;             \r             \r             for(int j=0; j<i; j++)      cat[i] += cat[j] * cat[i - j - 1];\r         }\r         \r         return cat[n];\r     }",   "f" : [ ],   "t" : [ "void AKA_TEST_Solution_numTrees_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_numTrees_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numTrees_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numTrees(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0096-unique-binary-search-trees\\\\0096-unique-binary-search-trees.cpp\\\\Solution\\\\numTrees(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_numTrees_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_numTrees_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numTrees_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numTrees(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0096-unique-binary-search-trees\\\\0096-unique-binary-search-trees.cpp\\\\Solution\\\\numTrees(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "c" : [ "" ] },
  {   "path_fm" : "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p2\\0099-recover-binary-search-tree\\0099-recover-binary-search-tree.cpp\\Solution\\inorder(TreeNode*,vector<TreeNode*>&)",   "simplified_t" : [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n" ],   "m" : [ "void inorder(TreeNode* root, vector<TreeNode*> &res) {\r\n        \r\n        if(root == NULL)                    return;\r\n        \r\n        // inorder means left -> root -> right\r\n        \r\n        inorder(root->left, res);\r\n        res.push_back(root);\r\n        inorder(root->right, res);\r\n        \r\n        return;\r\n    }", "void inorder(TreeNode* root, vector<TreeNode*> &res) {\r\n        \r\n        if(root == NULL)                    return;\r\n        \r\n        // inorder means left -> root -> right\r\n        \r\n        inorder(root->left, res);\r\n        res.push_back(root);\r\n        inorder(root->right, res);\r\n        \r\n        return;\r\n    }", "void recoverTree(TreeNode* root) {\r\n    \r\n        if(root == NULL)                                return;\r\n        \r\n        vector<TreeNode*> res;\r\n        inorder(root, res);\r\n\r\n        // Ideally, inorder of BST gives us the nodes in strictly increasing order\r\n        \r\n        // But, in this swapped BST, the position of two BST are wrong\r\n        // So, find those dip, and take the 1st node of 1st dip and 2nd node of 2nd dip\r\n        \r\n        int n = res.size();\r\n        \r\n        TreeNode* node1 = NULL, *node2 = NULL;\r\n        \r\n        for(int i=1; i<n; i++) {\r\n            \r\n            // If a dip is found\r\n            if(res[i-1]->val > res[i]->val) {\r\n                \r\n                if(node1 == NULL)                      node1 = res[i-1];\r\n                node2 = res[i];\r\n            }\r\n        }\r\n        \r\n        swap(node1->val, node2->val);\r\n        return;\r\n    }" ],   "fc" : "class Solution {\r public:\r     \r     \r     void inorder(TreeNode* root, vector<TreeNode*> &res) {\r         \r         if(root == NULL)                    return;\r         \r         // inorder means left -> root -> right\r         \r         inorder(root->left, res);\r         res.push_back(root);\r         inorder(root->right, res);\r         \r         return;\r     }\r     \r     void recoverTree(TreeNode* root) {\r     \r         if(root == NULL)                                return;\r         \r         vector<TreeNode*> res;\r         inorder(root, res);\r \r         // Ideally, inorder of BST gives us the nodes in strictly increasing order\r         \r         // But, in this swapped BST, the position of two BST are wrong\r         // So, find those dip, and take the 1st node of 1st dip and 2nd node of 2nd dip\r         \r         int n = res.size();\r         \r         TreeNode* node1 = NULL, *node2 = NULL;\r         \r         for(int i=1; i<n; i++) {\r             \r             // If a dip is found\r             if(res[i-1]->val > res[i]->val) {\r                 \r                 if(node1 == NULL)                      node1 = res[i-1];\r                 node2 = res[i];\r             }\r         }\r         \r         swap(node1->val, node2->val);\r         return;\r     }\r     \r };",   "fm" : "void inorder(TreeNode* root, vector<TreeNode*> &res) {\r         \r         if(root == NULL)                    return;\r         \r         // inorder means left -> root -> right\r         \r         inorder(root->left, res);\r         res.push_back(root);\r         inorder(root->right, res);\r         \r         return;\r     }",   "f" : [ ],   "t" : [ "void AKA_TEST_Solution_inorder_TreeNodemul_vector_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_inorder_TreeNodemul_vector_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_inorder_TreeNodemul_vector_TreeNodemul_random_2\");AKA_INSTANCE___Solution->inorder(root,res);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\Solution\\\\inorder(TreeNode*,vector<TreeNode*>&)\");\n\n/* error assertion */\nvector<TreeNode*> EXPECTED_res;\n\n\n\n// tear down\n;\n}\n}\n" ],   "c" : [ "" ] },
  {   "path_fm" : "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p2\\0099-recover-binary-search-tree\\0099-recover-binary-search-tree.cpp\\Solution\\recoverTree(TreeNode*)",   "simplified_t" : [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n" ],   "m" : [ "void inorder(TreeNode* root, vector<TreeNode*> &res) {\r\n        \r\n        if(root == NULL)                    return;\r\n        \r\n        // inorder means left -> root -> right\r\n        \r\n        inorder(root->left, res);\r\n        res.push_back(root);\r\n        inorder(root->right, res);\r\n        \r\n        return;\r\n    }" ],   "fc" : "class Solution {\r public:\r     \r     \r     void inorder(TreeNode* root, vector<TreeNode*> &res) {\r         \r         if(root == NULL)                    return;\r         \r         // inorder means left -> root -> right\r         \r         inorder(root->left, res);\r         res.push_back(root);\r         inorder(root->right, res);\r         \r         return;\r     }\r     \r     void recoverTree(TreeNode* root) {\r     \r         if(root == NULL)                                return;\r         \r         vector<TreeNode*> res;\r         inorder(root, res);\r \r         // Ideally, inorder of BST gives us the nodes in strictly increasing order\r         \r         // But, in this swapped BST, the position of two BST are wrong\r         // So, find those dip, and take the 1st node of 1st dip and 2nd node of 2nd dip\r         \r         int n = res.size();\r         \r         TreeNode* node1 = NULL, *node2 = NULL;\r         \r         for(int i=1; i<n; i++) {\r             \r             // If a dip is found\r             if(res[i-1]->val > res[i]->val) {\r                 \r                 if(node1 == NULL)                      node1 = res[i-1];\r                 node2 = res[i];\r             }\r         }\r         \r         swap(node1->val, node2->val);\r         return;\r     }\r     \r };",   "fm" : "void recoverTree(TreeNode* root) {\r     \r         if(root == NULL)                                return;\r         \r         vector<TreeNode*> res;\r         inorder(root, res);\r \r         // Ideally, inorder of BST gives us the nodes in strictly increasing order\r         \r         // But, in this swapped BST, the position of two BST are wrong\r         // So, find those dip, and take the 1st node of 1st dip and 2nd node of 2nd dip\r         \r         int n = res.size();\r         \r         TreeNode* node1 = NULL, *node2 = NULL;\r         \r         for(int i=1; i<n; i++) {\r             \r             // If a dip is found\r             if(res[i-1]->val > res[i]->val) {\r                 \r                 if(node1 == NULL)                      node1 = res[i-1];\r                 node2 = res[i];\r             }\r         }\r         \r         swap(node1->val, node2->val);\r         return;\r     }",   "f" : [ ],   "t" : [ "void AKA_TEST_Solution_recoverTree_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_recoverTree_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_recoverTree_TreeNodemul_random_4\");AKA_INSTANCE___Solution->recoverTree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\Solution\\\\recoverTree(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n" ],   "c" : [ "" ] },
  {   "path_fm" : "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p2\\0116-populating-next-right-pointers-in-each-node\\0116-populating-next-right-pointers-in-each-node.cpp\\Solution\\bfs(Node*&)",   "simplified_t" : [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n" ],   "m" : [ "Node* connect(Node* root) {\r\n    \r\n        if(root == NULL)                        return NULL;\r\n        \r\n        bfs(root);\r\n        return root;\r\n    }" ],   "fc" : "class Solution {\r public:\r     \r     void bfs(Node* &root) {\r         \r         if(root == NULL)                            return;\r         \r         queue<Node*> q;\r         q.push(root);\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             // Print all nodes at a level\r             vector<Node*> path;\r             \r             while(n--) {\r                 \r                 Node* temp = q.front();\r                 q.pop();\r             \r                 path.push_back(temp);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             int k = path.size();\r             \r             for(int i=1; i<k; i++) {\r                 path[i-1]->next = path[i];\r             }\r             \r             path[k-1]->next = NULL;\r             \r             path.clear();\r         }\r         \r         return;\r     }\r     \r     Node* connect(Node* root) {\r     \r         if(root == NULL)                        return NULL;\r         \r         bfs(root);\r         return root;\r     }\r     \r };",   "fm" : "void bfs(Node* &root) {\r         \r         if(root == NULL)                            return;\r         \r         queue<Node*> q;\r         q.push(root);\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             // Print all nodes at a level\r             vector<Node*> path;\r             \r             while(n--) {\r                 \r                 Node* temp = q.front();\r                 q.pop();\r             \r                 path.push_back(temp);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             int k = path.size();\r             \r             for(int i=1; i<k; i++) {\r                 path[i-1]->next = path[i];\r             }\r             \r             path[k-1]->next = NULL;\r             \r             path.clear();\r         }\r         \r         return;\r     }",   "f" : [ ],   "t" : [ "void AKA_TEST_Solution_bfs_Nodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_bfs_Nodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_bfs_Nodemul_random_2\");AKA_INSTANCE___Solution->bfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Solution\\\\bfs(Node*&)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_bfs_Nodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_bfs_Nodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_bfs_Nodemul_random_3\");AKA_INSTANCE___Solution->bfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Solution\\\\bfs(Node*&)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n" ],   "c" : [ "" ] },
  {   "path_fm" : "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p2\\0116-populating-next-right-pointers-in-each-node\\0116-populating-next-right-pointers-in-each-node.cpp\\Solution\\connect(Node*)",   "simplified_t" : [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0096-unique-binary-search-trees.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1924933717;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\inorder(TreeNode*,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<TreeNode*> res;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode res */\nTreeNode* res_element0;\nres.push_back(res_element0);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2047908820;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1255942186;\nAKA_mark(\"Calling: .\\\\p2\\\\0099-recover-binary-search-tree\\\\0099-recover-binary-search-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\0099-recover-binary-search-tree.cpp\\\\recoverTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1827880955;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left0__val=-479020959;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node(root0__left0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1054030402;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\bfs(Node*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n" ],   "m" : [ "void bfs(Node* &root) {\r\n        \r\n        if(root == NULL)                            return;\r\n        \r\n        queue<Node*> q;\r\n        q.push(root);\r\n        \r\n        while(q.empty() == false) {\r\n            \r\n            int n = q.size();\r\n            \r\n            // Print all nodes at a level\r\n            vector<Node*> path;\r\n            \r\n            while(n--) {\r\n                \r\n                Node* temp = q.front();\r\n                q.pop();\r\n            \r\n                path.push_back(temp);\r\n                \r\n                if(temp->left != NULL)              q.push(temp->left);\r\n                if(temp->right != NULL)             q.push(temp->right);\r\n            }\r\n            \r\n            int k = path.size();\r\n            \r\n            for(int i=1; i<k; i++) {\r\n                path[i-1]->next = path[i];\r\n            }\r\n            \r\n            path[k-1]->next = NULL;\r\n            \r\n            path.clear();\r\n        }\r\n        \r\n        return;\r\n    }" ],   "fc" : "class Solution {\r public:\r     \r     void bfs(Node* &root) {\r         \r         if(root == NULL)                            return;\r         \r         queue<Node*> q;\r         q.push(root);\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             // Print all nodes at a level\r             vector<Node*> path;\r             \r             while(n--) {\r                 \r                 Node* temp = q.front();\r                 q.pop();\r             \r                 path.push_back(temp);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             int k = path.size();\r             \r             for(int i=1; i<k; i++) {\r                 path[i-1]->next = path[i];\r             }\r             \r             path[k-1]->next = NULL;\r             \r             path.clear();\r         }\r         \r         return;\r     }\r     \r     Node* connect(Node* root) {\r     \r         if(root == NULL)                        return NULL;\r         \r         bfs(root);\r         return root;\r     }\r     \r };",   "fm" : "Node* connect(Node* root) {\r     \r         if(root == NULL)                        return NULL;\r         \r         bfs(root);\r         return root;\r     }",   "f" : [ ],   "t" : [ "void AKA_TEST_Solution_connect_Nodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_connect_Nodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root0__val=-1448980280;\n/* PointerStructureDataNode _left */\nstd::vector<Node*> AKA_VECTOR_INIT_root0__left;\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[0]\\\\_left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_0).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_0);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left1__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[1]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_1 = new ::Node(root0__left1__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_1).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_1);\n/* SubClassDataNode _left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__left2__val=0;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\\\\_left\\\\_left[2]\\\\_left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0__left_2 = new ::Node(root0__left2__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0__left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0__left_2).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root0__left_2).next;\nAKA_VECTOR_INIT_root0__left.push_back(AKA_VECTOR_INIT_root0__left_2);\nNode* root0__left = AKA_VECTOR_INIT_root0__left[0];\n/* PointerStructureDataNode _right */\nNode* root0__right;\n/* PointerStructureDataNode _next */\nNode* root0__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__left,root0__right,root0__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode _val */\nint root1__val=0;\n/* PointerStructureDataNode _left */\nNode* root1__left;\n/* PointerStructureDataNode _right */\nNode* root1__right;\n/* PointerStructureDataNode _next */\nNode* root1__next;\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node(root1__val,root1__left,root1__right,root1__next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_1).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_connect_Nodemul_random_0\");Node* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->connect(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Solution\\\\connect(Node*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_connect_Nodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_connect_Nodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Node\\\\Node()|ROOT\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\connect(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_root_0).next;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_connect_Nodemul_random_3\");Node* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->connect(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p2\\\\0116-populating-next-right-pointers-in-each-node\\\\0116-populating-next-right-pointers-in-each-node.cpp\\\\Solution\\\\connect(Node*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "c" : [ "" ] }
]

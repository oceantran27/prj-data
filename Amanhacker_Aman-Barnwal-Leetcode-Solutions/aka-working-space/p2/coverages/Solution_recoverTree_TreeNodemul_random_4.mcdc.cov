<pre>...
...
...
...
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>    
<b style="color: grey;">35    </b>    
<b style="color: grey;">36    </b>    void inorder(TreeNode* root, vector&lt;TreeNode*&gt; &amp;res) {
<b style="color: grey;">37    </b>        
<b style="color: grey;">38    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                    <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">39    </b>        
<b style="color: grey;">40    </b>        // inorder means left -&gt; root -&gt; right
<b style="color: grey;">41    </b>        
<b style="color: grey;">42    </b>        <b style="background-color:yellow;color:black";>inorder(root-&gt;left, res);</b>
<b style="color: grey;">43    </b>        <b style="background-color:yellow;color:black";>res.push_back(root);</b>
<b style="color: grey;">44    </b>        <b style="background-color:yellow;color:black";>inorder(root-&gt;right, res);</b>
<b style="color: grey;">45    </b>        
<b style="color: grey;">46    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">47    </b>    }
<b style="color: grey;">48    </b>    
<b style="color: grey;">49    </b>    void recoverTree(TreeNode* root) {
<b style="color: grey;">50    </b>    
<b style="color: grey;">51    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                                return;
<b style="color: grey;">52    </b>        
<b style="color: grey;">53    </b>        <b style="background-color:yellow;color:black";>vector&lt;TreeNode*&gt; res;</b>
<b style="color: grey;">54    </b>        <b style="background-color:yellow;color:black";>inorder(root, res);</b>
<b style="color: grey;">55    </b>
<b style="color: grey;">56    </b>        // Ideally, inorder of BST gives us the nodes in strictly increasing order
<b style="color: grey;">57    </b>        
<b style="color: grey;">58    </b>        // But, in this swapped BST, the position of two BST are wrong
<b style="color: grey;">59    </b>        // So, find those dip, and take the 1st node of 1st dip and 2nd node of 2nd dip
<b style="color: grey;">60    </b>        
<b style="color: grey;">61    </b>        <b style="background-color:yellow;color:black";>int n = res.size();</b>
<b style="color: grey;">62    </b>        
<b style="color: grey;">63    </b>        <b style="background-color:yellow;color:black";>TreeNode* node1 = NULL, *node2 = NULL;</b>
<b style="color: grey;">64    </b>        
<b style="color: grey;">65    </b>        for(<b style="background-color:yellow;color:black";>int i=1;</b> i&lt;n; i++) {
<b style="color: grey;">66    </b>            
<b style="color: grey;">67    </b>            // If a dip is found
<b style="color: grey;">68    </b>            if(res[i-1]-&gt;val &gt; res[i]-&gt;val) {
<b style="color: grey;">69    </b>                
<b style="color: grey;">70    </b>                if(node1 == NULL)                      node1 = res[i-1];
<b style="color: grey;">71    </b>                node2 = res[i];
<b style="color: grey;">72    </b>            }
<b style="color: grey;">73    </b>        }
<b style="color: grey;">74    </b>        
<b style="color: grey;">75    </b>        <b style="background-color:yellow;color:black";>swap(node1-&gt;val, node2-&gt;val);</b>
...
...
...
...
</pre>
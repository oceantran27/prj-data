<pre>...
...
...
...
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>    
<b style="color: grey;">35    </b>    
<b style="color: grey;">36    </b>    void inorder(TreeNode* root, vector&lt;TreeNode*&gt; &amp;res) {
<b style="color: grey;">37    </b>        
<b style="color: grey;">38    </b>        if(<b style="background-color:#3D9970;color:white";>&nbsp;T&nbsp;</b>&nbsp;<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>root == NULL</b>)                    <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">39    </b>        
<b style="color: grey;">40    </b>        // inorder means left -&gt; root -&gt; right
<b style="color: grey;">41    </b>        
<b style="color: grey;">42    </b>        <b style="background-color:yellow;color:black";>inorder(root-&gt;left, res);</b>
<b style="color: grey;">43    </b>        <b style="background-color:yellow;color:black";>res.push_back(root);</b>
<b style="color: grey;">44    </b>        <b style="background-color:yellow;color:black";>inorder(root-&gt;right, res);</b>
<b style="color: grey;">45    </b>        
<b style="color: grey;">46    </b>        <b style="background-color:yellow;color:black";>return;</b>
<b style="color: grey;">47    </b>    }
<b style="color: grey;">48    </b>    
<b style="color: grey;">49    </b>    void recoverTree(TreeNode* root) {
<b style="color: grey;">50    </b>    
<b style="color: grey;">51    </b>        if(root == NULL)                                return;
<b style="color: grey;">52    </b>        
<b style="color: grey;">53    </b>        vector&lt;TreeNode*&gt; res;
...
...
...
...
</pre>
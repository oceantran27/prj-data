<pre>...
...
...
...
<b style="color: grey;">9     </b>using namespace std;
<b style="color: grey;">10     </b>
<b style="color: grey;">11    </b>class Solution {
<b style="color: grey;">12    </b>public:
<b style="color: grey;">13    </b>  
<b style="color: grey;">14    </b>    int helperMaxSum(vector&lt;int&gt; &amp;a, int n, int k, int pos, int &amp;res, vector&lt;int&gt; &amp;dp) {
<b style="color: grey;">15    </b>        
<b style="color: grey;">16    </b>        // Base Condition
<b style="color: grey;">17    </b>        if(<b style="background-color:yellow;color:black";>pos &gt;= n</b>)                                    <b style="background-color:yellow;color:black";>return 0;</b>
<b style="color: grey;">18    </b>        if(pos &lt; n &amp;&amp; dp[pos] != -1)                    return dp[pos];
<b style="color: grey;">19    </b>        
<b style="color: grey;">20    </b>        int maxEle = 0;
<b style="color: grey;">21    </b>        
<b style="color: grey;">22    </b>        // For each position pos, increase your subarray size i from 0 to k - 1, tracking the max value maxEle so far. 
<b style="color: grey;">23    </b>        // The sum of the subarray is maxEle * (i + 1).
<b style="color: grey;">24    </b>
...
...
...
...
</pre>
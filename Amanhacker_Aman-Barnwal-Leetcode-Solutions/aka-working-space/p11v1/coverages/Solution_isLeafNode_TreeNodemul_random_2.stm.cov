<pre>...
...
...
...
<b style="color: grey;">44    </b>        
<b style="color: grey;">45    </b>        findMinMax(root, node-&gt;left, mini, maxi);
<b style="color: grey;">46    </b>        findMinMax(root, node-&gt;right, mini, maxi);
<b style="color: grey;">47    </b>        
<b style="color: grey;">48    </b>        return;
<b style="color: grey;">49    </b>    }
<b style="color: grey;">50    </b>    
<b style="color: grey;">51    </b>    bool isLeafNode(TreeNode* root) {
<b style="color: grey;">52    </b>        <b style="background-color:yellow;color:black";>return (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL);</b>
<b style="color: grey;">53    </b>    }
<b style="color: grey;">54    </b>    
<b style="color: grey;">55    </b>    // For each node, find the min and max value of its descendants of its subtree
<b style="color: grey;">56    </b>    
<b style="color: grey;">57    </b>    void dfs(TreeNode* root, int &amp;res) {
<b style="color: grey;">58    </b>        
<b style="color: grey;">59    </b>        if(root == NULL)                            return;
...
...
...
...
</pre>
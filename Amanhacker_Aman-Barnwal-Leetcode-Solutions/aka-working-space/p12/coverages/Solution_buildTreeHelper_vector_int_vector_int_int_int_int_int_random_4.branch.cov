<pre>...
...
...
...
<b style="color: grey;">30    </b> };
<b style="color: grey;">31    </b>
<b style="color: grey;">32    </b>class Solution {
<b style="color: grey;">33    </b>public:
<b style="color: grey;">34    </b>
<b style="color: grey;">35    </b>    TreeNode* buildTreeHelper(vector&lt;int&gt; preorder, vector&lt;int&gt; inorder, int preStart, int preEnd, int inStart, int inEnd) {
<b style="color: grey;">36    </b>        
<b style="color: grey;">37    </b>        // Base Condition
<b style="color: grey;">38    </b>        if(<b style="background-color:#FF4136;color:white";>&nbsp;F&nbsp;</b>&nbsp;<b style="background-color:yellow;color:black";>preStart &gt; preEnd || inStart &gt; inEnd</b>)                        return NULL;
<b style="color: grey;">39    </b>        
<b style="color: grey;">40    </b>        <b style="background-color:yellow;color:black";>int preLeftStart, preLeftEnd, inLeftStart, inLeftEnd;</b>
<b style="color: grey;">41    </b>        <b style="background-color:yellow;color:black";>int preRightStart, preRightEnd, inRightStart, inRightEnd;</b>
<b style="color: grey;">42    </b>        
<b style="color: grey;">43    </b>        // preorder means root -&gt; left -&gt; right
<b style="color: grey;">44    </b>        // inorder means left -&gt; root -&gt; right
<b style="color: grey;">45    </b>        
<b style="color: grey;">46    </b>        <b style="background-color:yellow;color:black";>TreeNode* root = new TreeNode(preorder[preStart]);</b>
<b style="color: grey;">47    </b>        
<b style="color: grey;">48    </b>        // Find index of root in inorder
<b style="color: grey;">49    </b>        int rootIndex;
<b style="color: grey;">50    </b>        
<b style="color: grey;">51    </b>        for(int i=inStart; i&lt;=inEnd; i++) {
<b style="color: grey;">52    </b>            if(inorder[i] == root-&gt;val) {
<b style="color: grey;">53    </b>                rootIndex = i;
...
...
...
...
</pre>
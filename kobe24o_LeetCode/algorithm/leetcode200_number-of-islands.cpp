#include <bits/stdc++.h>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;
//class Solution//DFS
//{
//public:
//    int numIslands(vector<vector<char>>& grid)
//    {
//        int i, j, numofislands = 0;
//        for(i = 0; i < grid.size(); ++i)
//        {
//            for(j = 0; j < grid[i].size(); ++j)
//            {
//                if(grid[i][j] == '1')
//                {
//                    numofislands++;
//                    dfs(grid,i,j);
//                }
//            }
//        }
//        return numofislands;
//    }
//    void dfs(vector<vector<char>>& grid, int i, int j)
//    {
//        grid[i][j] = '0';//标记走过了，修改了地图（不影响解题）
//        if(i-1 >= 0 && grid[i-1][j] == '1')
//            dfs(grid,i-1,j);
//        if(j-1 >= 0 && grid[i][j-1] == '1')
//            dfs(grid,i,j-1);
//        if(i+1 < grid.size() && grid[i+1][j] == '1')
//            dfs(grid,i+1,j);
//        if(j+1 < grid[i].size() && grid[i][j+1] == '1')
//            dfs(grid,i,j+1);
//    }
//};

class Solution//BFS
{
public:
    int numIslands(vector<vector<char>>& grid)
    {
        if(grid.empty())
            return 0;
        int i, j, r, c, numofislands = 0;
        int x = grid.size(), y = grid[0].size();
        queue<pair<int,int> > q;
        for(i = 0; i < x; ++i)
        {
            for(j = 0; j < y; ++j)
            {
                if(grid[i][j] == '1')
                {
                    numofislands++;
                    grid[i][j] = '0';
                    q.push({i,j});
                    while(!q.empty())
                    {
                        r = q.front().first;
                        c = q.front().second;
                        //grid[r][c] = '0';//标记走过了(不要写在这里，否则，会重复检查很多遍)
                        q.pop();
                        if(r-1 >= 0 && grid[r-1][c] == '1')
                        {
                            q.push({r-1,c});
                            grid[r-1][c] = '0';//写在这里，找到了就马上第一时间标记
                        }
                        if(c-1 >= 0 && grid[r][c-1] == '1')
                        {
                            q.push({r,c-1});
                            grid[r][c-1] = '0';
                        }
                        if(r+1 < x && grid[r+1][c] == '1')
                        {
                            q.push({r+1,c});
                            grid[r+1][c] = '0';
                        }
                        if(c+1 < y && grid[r][c+1] == '1')
                        {
                            q.push({r,c+1});
                            grid[r][c+1] = '0';
                        }
                    }
                }
            }
        }
        return numofislands;
    }
};

int main(int argc, char** argv)
{
    vector<vector<char>> grid = {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
    Solution s;
    std::cout << s.numIslands(grid);
    return 0;
}